/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 * This file is generated by jOOQ.
 */
package edu.uci.ics.texera.dao.jooq.generated;


import edu.uci.ics.texera.dao.jooq.generated.tables.Dataset;
import edu.uci.ics.texera.dao.jooq.generated.tables.DatasetUserAccess;
import edu.uci.ics.texera.dao.jooq.generated.tables.DatasetUserLikes;
import edu.uci.ics.texera.dao.jooq.generated.tables.DatasetVersion;
import edu.uci.ics.texera.dao.jooq.generated.tables.DatasetViewCount;
import edu.uci.ics.texera.dao.jooq.generated.tables.OperatorExecutions;
import edu.uci.ics.texera.dao.jooq.generated.tables.OperatorPortExecutions;
import edu.uci.ics.texera.dao.jooq.generated.tables.Project;
import edu.uci.ics.texera.dao.jooq.generated.tables.ProjectUserAccess;
import edu.uci.ics.texera.dao.jooq.generated.tables.PublicProject;
import edu.uci.ics.texera.dao.jooq.generated.tables.User;
import edu.uci.ics.texera.dao.jooq.generated.tables.UserConfig;
import edu.uci.ics.texera.dao.jooq.generated.tables.Workflow;
import edu.uci.ics.texera.dao.jooq.generated.tables.WorkflowComputingUnit;
import edu.uci.ics.texera.dao.jooq.generated.tables.WorkflowExecutions;
import edu.uci.ics.texera.dao.jooq.generated.tables.WorkflowOfProject;
import edu.uci.ics.texera.dao.jooq.generated.tables.WorkflowOfUser;
import edu.uci.ics.texera.dao.jooq.generated.tables.WorkflowUserAccess;
import edu.uci.ics.texera.dao.jooq.generated.tables.WorkflowUserClones;
import edu.uci.ics.texera.dao.jooq.generated.tables.WorkflowUserLikes;
import edu.uci.ics.texera.dao.jooq.generated.tables.WorkflowVersion;
import edu.uci.ics.texera.dao.jooq.generated.tables.WorkflowViewCount;
import edu.uci.ics.texera.dao.jooq.generated.tables.records.DatasetRecord;
import edu.uci.ics.texera.dao.jooq.generated.tables.records.DatasetUserAccessRecord;
import edu.uci.ics.texera.dao.jooq.generated.tables.records.DatasetUserLikesRecord;
import edu.uci.ics.texera.dao.jooq.generated.tables.records.DatasetVersionRecord;
import edu.uci.ics.texera.dao.jooq.generated.tables.records.DatasetViewCountRecord;
import edu.uci.ics.texera.dao.jooq.generated.tables.records.OperatorExecutionsRecord;
import edu.uci.ics.texera.dao.jooq.generated.tables.records.OperatorPortExecutionsRecord;
import edu.uci.ics.texera.dao.jooq.generated.tables.records.ProjectRecord;
import edu.uci.ics.texera.dao.jooq.generated.tables.records.ProjectUserAccessRecord;
import edu.uci.ics.texera.dao.jooq.generated.tables.records.PublicProjectRecord;
import edu.uci.ics.texera.dao.jooq.generated.tables.records.UserConfigRecord;
import edu.uci.ics.texera.dao.jooq.generated.tables.records.UserRecord;
import edu.uci.ics.texera.dao.jooq.generated.tables.records.WorkflowComputingUnitRecord;
import edu.uci.ics.texera.dao.jooq.generated.tables.records.WorkflowExecutionsRecord;
import edu.uci.ics.texera.dao.jooq.generated.tables.records.WorkflowOfProjectRecord;
import edu.uci.ics.texera.dao.jooq.generated.tables.records.WorkflowOfUserRecord;
import edu.uci.ics.texera.dao.jooq.generated.tables.records.WorkflowRecord;
import edu.uci.ics.texera.dao.jooq.generated.tables.records.WorkflowUserAccessRecord;
import edu.uci.ics.texera.dao.jooq.generated.tables.records.WorkflowUserClonesRecord;
import edu.uci.ics.texera.dao.jooq.generated.tables.records.WorkflowUserLikesRecord;
import edu.uci.ics.texera.dao.jooq.generated.tables.records.WorkflowVersionRecord;
import edu.uci.ics.texera.dao.jooq.generated.tables.records.WorkflowViewCountRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * texera_db.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<DatasetRecord> DATASET_PKEY = Internal.createUniqueKey(Dataset.DATASET, DSL.name("dataset_pkey"), new TableField[] { Dataset.DATASET.DID }, true);
    public static final UniqueKey<DatasetUserAccessRecord> DATASET_USER_ACCESS_PKEY = Internal.createUniqueKey(DatasetUserAccess.DATASET_USER_ACCESS, DSL.name("dataset_user_access_pkey"), new TableField[] { DatasetUserAccess.DATASET_USER_ACCESS.DID, DatasetUserAccess.DATASET_USER_ACCESS.UID }, true);
    public static final UniqueKey<DatasetUserLikesRecord> DATASET_USER_LIKES_PKEY = Internal.createUniqueKey(DatasetUserLikes.DATASET_USER_LIKES, DSL.name("dataset_user_likes_pkey"), new TableField[] { DatasetUserLikes.DATASET_USER_LIKES.UID, DatasetUserLikes.DATASET_USER_LIKES.DID }, true);
    public static final UniqueKey<DatasetVersionRecord> DATASET_VERSION_PKEY = Internal.createUniqueKey(DatasetVersion.DATASET_VERSION, DSL.name("dataset_version_pkey"), new TableField[] { DatasetVersion.DATASET_VERSION.DVID }, true);
    public static final UniqueKey<DatasetViewCountRecord> DATASET_VIEW_COUNT_PKEY = Internal.createUniqueKey(DatasetViewCount.DATASET_VIEW_COUNT, DSL.name("dataset_view_count_pkey"), new TableField[] { DatasetViewCount.DATASET_VIEW_COUNT.DID }, true);
    public static final UniqueKey<OperatorExecutionsRecord> OPERATOR_EXECUTIONS_PKEY = Internal.createUniqueKey(OperatorExecutions.OPERATOR_EXECUTIONS, DSL.name("operator_executions_pkey"), new TableField[] { OperatorExecutions.OPERATOR_EXECUTIONS.WORKFLOW_EXECUTION_ID, OperatorExecutions.OPERATOR_EXECUTIONS.OPERATOR_ID }, true);
    public static final UniqueKey<OperatorPortExecutionsRecord> OPERATOR_PORT_EXECUTIONS_PKEY = Internal.createUniqueKey(OperatorPortExecutions.OPERATOR_PORT_EXECUTIONS, DSL.name("operator_port_executions_pkey"), new TableField[] { OperatorPortExecutions.OPERATOR_PORT_EXECUTIONS.WORKFLOW_EXECUTION_ID, OperatorPortExecutions.OPERATOR_PORT_EXECUTIONS.GLOBAL_PORT_ID }, true);
    public static final UniqueKey<ProjectRecord> PROJECT_OWNER_ID_NAME_KEY = Internal.createUniqueKey(Project.PROJECT, DSL.name("project_owner_id_name_key"), new TableField[] { Project.PROJECT.OWNER_ID, Project.PROJECT.NAME }, true);
    public static final UniqueKey<ProjectRecord> PROJECT_PKEY = Internal.createUniqueKey(Project.PROJECT, DSL.name("project_pkey"), new TableField[] { Project.PROJECT.PID }, true);
    public static final UniqueKey<ProjectUserAccessRecord> PROJECT_USER_ACCESS_PKEY = Internal.createUniqueKey(ProjectUserAccess.PROJECT_USER_ACCESS, DSL.name("project_user_access_pkey"), new TableField[] { ProjectUserAccess.PROJECT_USER_ACCESS.UID, ProjectUserAccess.PROJECT_USER_ACCESS.PID }, true);
    public static final UniqueKey<PublicProjectRecord> PUBLIC_PROJECT_PKEY = Internal.createUniqueKey(PublicProject.PUBLIC_PROJECT, DSL.name("public_project_pkey"), new TableField[] { PublicProject.PUBLIC_PROJECT.PID }, true);
    public static final UniqueKey<UserRecord> USER_EMAIL_KEY = Internal.createUniqueKey(User.USER, DSL.name("user_email_key"), new TableField[] { User.USER.EMAIL }, true);
    public static final UniqueKey<UserRecord> USER_GOOGLE_ID_KEY = Internal.createUniqueKey(User.USER, DSL.name("user_google_id_key"), new TableField[] { User.USER.GOOGLE_ID }, true);
    public static final UniqueKey<UserRecord> USER_PKEY = Internal.createUniqueKey(User.USER, DSL.name("user_pkey"), new TableField[] { User.USER.UID }, true);
    public static final UniqueKey<UserConfigRecord> USER_CONFIG_PKEY = Internal.createUniqueKey(UserConfig.USER_CONFIG, DSL.name("user_config_pkey"), new TableField[] { UserConfig.USER_CONFIG.UID, UserConfig.USER_CONFIG.KEY }, true);
    public static final UniqueKey<WorkflowRecord> WORKFLOW_PKEY = Internal.createUniqueKey(Workflow.WORKFLOW, DSL.name("workflow_pkey"), new TableField[] { Workflow.WORKFLOW.WID }, true);
    public static final UniqueKey<WorkflowComputingUnitRecord> WORKFLOW_COMPUTING_UNIT_PKEY = Internal.createUniqueKey(WorkflowComputingUnit.WORKFLOW_COMPUTING_UNIT, DSL.name("workflow_computing_unit_pkey"), new TableField[] { WorkflowComputingUnit.WORKFLOW_COMPUTING_UNIT.CUID }, true);
    public static final UniqueKey<WorkflowExecutionsRecord> WORKFLOW_EXECUTIONS_PKEY = Internal.createUniqueKey(WorkflowExecutions.WORKFLOW_EXECUTIONS, DSL.name("workflow_executions_pkey"), new TableField[] { WorkflowExecutions.WORKFLOW_EXECUTIONS.EID }, true);
    public static final UniqueKey<WorkflowOfProjectRecord> WORKFLOW_OF_PROJECT_PKEY = Internal.createUniqueKey(WorkflowOfProject.WORKFLOW_OF_PROJECT, DSL.name("workflow_of_project_pkey"), new TableField[] { WorkflowOfProject.WORKFLOW_OF_PROJECT.WID, WorkflowOfProject.WORKFLOW_OF_PROJECT.PID }, true);
    public static final UniqueKey<WorkflowOfUserRecord> WORKFLOW_OF_USER_PKEY = Internal.createUniqueKey(WorkflowOfUser.WORKFLOW_OF_USER, DSL.name("workflow_of_user_pkey"), new TableField[] { WorkflowOfUser.WORKFLOW_OF_USER.UID, WorkflowOfUser.WORKFLOW_OF_USER.WID }, true);
    public static final UniqueKey<WorkflowUserAccessRecord> WORKFLOW_USER_ACCESS_PKEY = Internal.createUniqueKey(WorkflowUserAccess.WORKFLOW_USER_ACCESS, DSL.name("workflow_user_access_pkey"), new TableField[] { WorkflowUserAccess.WORKFLOW_USER_ACCESS.UID, WorkflowUserAccess.WORKFLOW_USER_ACCESS.WID }, true);
    public static final UniqueKey<WorkflowUserClonesRecord> WORKFLOW_USER_CLONES_PKEY = Internal.createUniqueKey(WorkflowUserClones.WORKFLOW_USER_CLONES, DSL.name("workflow_user_clones_pkey"), new TableField[] { WorkflowUserClones.WORKFLOW_USER_CLONES.UID, WorkflowUserClones.WORKFLOW_USER_CLONES.WID }, true);
    public static final UniqueKey<WorkflowUserLikesRecord> WORKFLOW_USER_LIKES_PKEY = Internal.createUniqueKey(WorkflowUserLikes.WORKFLOW_USER_LIKES, DSL.name("workflow_user_likes_pkey"), new TableField[] { WorkflowUserLikes.WORKFLOW_USER_LIKES.UID, WorkflowUserLikes.WORKFLOW_USER_LIKES.WID }, true);
    public static final UniqueKey<WorkflowVersionRecord> WORKFLOW_VERSION_PKEY = Internal.createUniqueKey(WorkflowVersion.WORKFLOW_VERSION, DSL.name("workflow_version_pkey"), new TableField[] { WorkflowVersion.WORKFLOW_VERSION.VID }, true);
    public static final UniqueKey<WorkflowViewCountRecord> WORKFLOW_VIEW_COUNT_PKEY = Internal.createUniqueKey(WorkflowViewCount.WORKFLOW_VIEW_COUNT, DSL.name("workflow_view_count_pkey"), new TableField[] { WorkflowViewCount.WORKFLOW_VIEW_COUNT.WID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<DatasetRecord, UserRecord> DATASET__DATASET_OWNER_UID_FKEY = Internal.createForeignKey(Dataset.DATASET, DSL.name("dataset_owner_uid_fkey"), new TableField[] { Dataset.DATASET.OWNER_UID }, Keys.USER_PKEY, new TableField[] { User.USER.UID }, true);
    public static final ForeignKey<DatasetUserAccessRecord, DatasetRecord> DATASET_USER_ACCESS__DATASET_USER_ACCESS_DID_FKEY = Internal.createForeignKey(DatasetUserAccess.DATASET_USER_ACCESS, DSL.name("dataset_user_access_did_fkey"), new TableField[] { DatasetUserAccess.DATASET_USER_ACCESS.DID }, Keys.DATASET_PKEY, new TableField[] { Dataset.DATASET.DID }, true);
    public static final ForeignKey<DatasetUserAccessRecord, UserRecord> DATASET_USER_ACCESS__DATASET_USER_ACCESS_UID_FKEY = Internal.createForeignKey(DatasetUserAccess.DATASET_USER_ACCESS, DSL.name("dataset_user_access_uid_fkey"), new TableField[] { DatasetUserAccess.DATASET_USER_ACCESS.UID }, Keys.USER_PKEY, new TableField[] { User.USER.UID }, true);
    public static final ForeignKey<DatasetUserLikesRecord, DatasetRecord> DATASET_USER_LIKES__DATASET_USER_LIKES_DID_FKEY = Internal.createForeignKey(DatasetUserLikes.DATASET_USER_LIKES, DSL.name("dataset_user_likes_did_fkey"), new TableField[] { DatasetUserLikes.DATASET_USER_LIKES.DID }, Keys.DATASET_PKEY, new TableField[] { Dataset.DATASET.DID }, true);
    public static final ForeignKey<DatasetUserLikesRecord, UserRecord> DATASET_USER_LIKES__DATASET_USER_LIKES_UID_FKEY = Internal.createForeignKey(DatasetUserLikes.DATASET_USER_LIKES, DSL.name("dataset_user_likes_uid_fkey"), new TableField[] { DatasetUserLikes.DATASET_USER_LIKES.UID }, Keys.USER_PKEY, new TableField[] { User.USER.UID }, true);
    public static final ForeignKey<DatasetVersionRecord, DatasetRecord> DATASET_VERSION__DATASET_VERSION_DID_FKEY = Internal.createForeignKey(DatasetVersion.DATASET_VERSION, DSL.name("dataset_version_did_fkey"), new TableField[] { DatasetVersion.DATASET_VERSION.DID }, Keys.DATASET_PKEY, new TableField[] { Dataset.DATASET.DID }, true);
    public static final ForeignKey<DatasetViewCountRecord, DatasetRecord> DATASET_VIEW_COUNT__DATASET_VIEW_COUNT_DID_FKEY = Internal.createForeignKey(DatasetViewCount.DATASET_VIEW_COUNT, DSL.name("dataset_view_count_did_fkey"), new TableField[] { DatasetViewCount.DATASET_VIEW_COUNT.DID }, Keys.DATASET_PKEY, new TableField[] { Dataset.DATASET.DID }, true);
    public static final ForeignKey<OperatorExecutionsRecord, WorkflowExecutionsRecord> OPERATOR_EXECUTIONS__OPERATOR_EXECUTIONS_WORKFLOW_EXECUTION_ID_FKEY = Internal.createForeignKey(OperatorExecutions.OPERATOR_EXECUTIONS, DSL.name("operator_executions_workflow_execution_id_fkey"), new TableField[] { OperatorExecutions.OPERATOR_EXECUTIONS.WORKFLOW_EXECUTION_ID }, Keys.WORKFLOW_EXECUTIONS_PKEY, new TableField[] { WorkflowExecutions.WORKFLOW_EXECUTIONS.EID }, true);
    public static final ForeignKey<OperatorPortExecutionsRecord, WorkflowExecutionsRecord> OPERATOR_PORT_EXECUTIONS__OPERATOR_PORT_EXECUTIONS_WORKFLOW_EXECUTION_ID_FKEY = Internal.createForeignKey(OperatorPortExecutions.OPERATOR_PORT_EXECUTIONS, DSL.name("operator_port_executions_workflow_execution_id_fkey"), new TableField[] { OperatorPortExecutions.OPERATOR_PORT_EXECUTIONS.WORKFLOW_EXECUTION_ID }, Keys.WORKFLOW_EXECUTIONS_PKEY, new TableField[] { WorkflowExecutions.WORKFLOW_EXECUTIONS.EID }, true);
    public static final ForeignKey<ProjectRecord, UserRecord> PROJECT__PROJECT_OWNER_ID_FKEY = Internal.createForeignKey(Project.PROJECT, DSL.name("project_owner_id_fkey"), new TableField[] { Project.PROJECT.OWNER_ID }, Keys.USER_PKEY, new TableField[] { User.USER.UID }, true);
    public static final ForeignKey<ProjectUserAccessRecord, ProjectRecord> PROJECT_USER_ACCESS__PROJECT_USER_ACCESS_PID_FKEY = Internal.createForeignKey(ProjectUserAccess.PROJECT_USER_ACCESS, DSL.name("project_user_access_pid_fkey"), new TableField[] { ProjectUserAccess.PROJECT_USER_ACCESS.PID }, Keys.PROJECT_PKEY, new TableField[] { Project.PROJECT.PID }, true);
    public static final ForeignKey<ProjectUserAccessRecord, UserRecord> PROJECT_USER_ACCESS__PROJECT_USER_ACCESS_UID_FKEY = Internal.createForeignKey(ProjectUserAccess.PROJECT_USER_ACCESS, DSL.name("project_user_access_uid_fkey"), new TableField[] { ProjectUserAccess.PROJECT_USER_ACCESS.UID }, Keys.USER_PKEY, new TableField[] { User.USER.UID }, true);
    public static final ForeignKey<PublicProjectRecord, ProjectRecord> PUBLIC_PROJECT__PUBLIC_PROJECT_PID_FKEY = Internal.createForeignKey(PublicProject.PUBLIC_PROJECT, DSL.name("public_project_pid_fkey"), new TableField[] { PublicProject.PUBLIC_PROJECT.PID }, Keys.PROJECT_PKEY, new TableField[] { Project.PROJECT.PID }, true);
    public static final ForeignKey<UserConfigRecord, UserRecord> USER_CONFIG__USER_CONFIG_UID_FKEY = Internal.createForeignKey(UserConfig.USER_CONFIG, DSL.name("user_config_uid_fkey"), new TableField[] { UserConfig.USER_CONFIG.UID }, Keys.USER_PKEY, new TableField[] { User.USER.UID }, true);
    public static final ForeignKey<WorkflowComputingUnitRecord, UserRecord> WORKFLOW_COMPUTING_UNIT__WORKFLOW_COMPUTING_UNIT_UID_FKEY = Internal.createForeignKey(WorkflowComputingUnit.WORKFLOW_COMPUTING_UNIT, DSL.name("workflow_computing_unit_uid_fkey"), new TableField[] { WorkflowComputingUnit.WORKFLOW_COMPUTING_UNIT.UID }, Keys.USER_PKEY, new TableField[] { User.USER.UID }, true);
    public static final ForeignKey<WorkflowExecutionsRecord, WorkflowComputingUnitRecord> WORKFLOW_EXECUTIONS__WORKFLOW_EXECUTIONS_CUID_FKEY = Internal.createForeignKey(WorkflowExecutions.WORKFLOW_EXECUTIONS, DSL.name("workflow_executions_cuid_fkey"), new TableField[] { WorkflowExecutions.WORKFLOW_EXECUTIONS.CUID }, Keys.WORKFLOW_COMPUTING_UNIT_PKEY, new TableField[] { WorkflowComputingUnit.WORKFLOW_COMPUTING_UNIT.CUID }, true);
    public static final ForeignKey<WorkflowExecutionsRecord, UserRecord> WORKFLOW_EXECUTIONS__WORKFLOW_EXECUTIONS_UID_FKEY = Internal.createForeignKey(WorkflowExecutions.WORKFLOW_EXECUTIONS, DSL.name("workflow_executions_uid_fkey"), new TableField[] { WorkflowExecutions.WORKFLOW_EXECUTIONS.UID }, Keys.USER_PKEY, new TableField[] { User.USER.UID }, true);
    public static final ForeignKey<WorkflowExecutionsRecord, WorkflowVersionRecord> WORKFLOW_EXECUTIONS__WORKFLOW_EXECUTIONS_VID_FKEY = Internal.createForeignKey(WorkflowExecutions.WORKFLOW_EXECUTIONS, DSL.name("workflow_executions_vid_fkey"), new TableField[] { WorkflowExecutions.WORKFLOW_EXECUTIONS.VID }, Keys.WORKFLOW_VERSION_PKEY, new TableField[] { WorkflowVersion.WORKFLOW_VERSION.VID }, true);
    public static final ForeignKey<WorkflowOfProjectRecord, ProjectRecord> WORKFLOW_OF_PROJECT__WORKFLOW_OF_PROJECT_PID_FKEY = Internal.createForeignKey(WorkflowOfProject.WORKFLOW_OF_PROJECT, DSL.name("workflow_of_project_pid_fkey"), new TableField[] { WorkflowOfProject.WORKFLOW_OF_PROJECT.PID }, Keys.PROJECT_PKEY, new TableField[] { Project.PROJECT.PID }, true);
    public static final ForeignKey<WorkflowOfProjectRecord, WorkflowRecord> WORKFLOW_OF_PROJECT__WORKFLOW_OF_PROJECT_WID_FKEY = Internal.createForeignKey(WorkflowOfProject.WORKFLOW_OF_PROJECT, DSL.name("workflow_of_project_wid_fkey"), new TableField[] { WorkflowOfProject.WORKFLOW_OF_PROJECT.WID }, Keys.WORKFLOW_PKEY, new TableField[] { Workflow.WORKFLOW.WID }, true);
    public static final ForeignKey<WorkflowOfUserRecord, UserRecord> WORKFLOW_OF_USER__WORKFLOW_OF_USER_UID_FKEY = Internal.createForeignKey(WorkflowOfUser.WORKFLOW_OF_USER, DSL.name("workflow_of_user_uid_fkey"), new TableField[] { WorkflowOfUser.WORKFLOW_OF_USER.UID }, Keys.USER_PKEY, new TableField[] { User.USER.UID }, true);
    public static final ForeignKey<WorkflowOfUserRecord, WorkflowRecord> WORKFLOW_OF_USER__WORKFLOW_OF_USER_WID_FKEY = Internal.createForeignKey(WorkflowOfUser.WORKFLOW_OF_USER, DSL.name("workflow_of_user_wid_fkey"), new TableField[] { WorkflowOfUser.WORKFLOW_OF_USER.WID }, Keys.WORKFLOW_PKEY, new TableField[] { Workflow.WORKFLOW.WID }, true);
    public static final ForeignKey<WorkflowUserAccessRecord, UserRecord> WORKFLOW_USER_ACCESS__WORKFLOW_USER_ACCESS_UID_FKEY = Internal.createForeignKey(WorkflowUserAccess.WORKFLOW_USER_ACCESS, DSL.name("workflow_user_access_uid_fkey"), new TableField[] { WorkflowUserAccess.WORKFLOW_USER_ACCESS.UID }, Keys.USER_PKEY, new TableField[] { User.USER.UID }, true);
    public static final ForeignKey<WorkflowUserAccessRecord, WorkflowRecord> WORKFLOW_USER_ACCESS__WORKFLOW_USER_ACCESS_WID_FKEY = Internal.createForeignKey(WorkflowUserAccess.WORKFLOW_USER_ACCESS, DSL.name("workflow_user_access_wid_fkey"), new TableField[] { WorkflowUserAccess.WORKFLOW_USER_ACCESS.WID }, Keys.WORKFLOW_PKEY, new TableField[] { Workflow.WORKFLOW.WID }, true);
    public static final ForeignKey<WorkflowUserClonesRecord, UserRecord> WORKFLOW_USER_CLONES__WORKFLOW_USER_CLONES_UID_FKEY = Internal.createForeignKey(WorkflowUserClones.WORKFLOW_USER_CLONES, DSL.name("workflow_user_clones_uid_fkey"), new TableField[] { WorkflowUserClones.WORKFLOW_USER_CLONES.UID }, Keys.USER_PKEY, new TableField[] { User.USER.UID }, true);
    public static final ForeignKey<WorkflowUserClonesRecord, WorkflowRecord> WORKFLOW_USER_CLONES__WORKFLOW_USER_CLONES_WID_FKEY = Internal.createForeignKey(WorkflowUserClones.WORKFLOW_USER_CLONES, DSL.name("workflow_user_clones_wid_fkey"), new TableField[] { WorkflowUserClones.WORKFLOW_USER_CLONES.WID }, Keys.WORKFLOW_PKEY, new TableField[] { Workflow.WORKFLOW.WID }, true);
    public static final ForeignKey<WorkflowUserLikesRecord, UserRecord> WORKFLOW_USER_LIKES__WORKFLOW_USER_LIKES_UID_FKEY = Internal.createForeignKey(WorkflowUserLikes.WORKFLOW_USER_LIKES, DSL.name("workflow_user_likes_uid_fkey"), new TableField[] { WorkflowUserLikes.WORKFLOW_USER_LIKES.UID }, Keys.USER_PKEY, new TableField[] { User.USER.UID }, true);
    public static final ForeignKey<WorkflowUserLikesRecord, WorkflowRecord> WORKFLOW_USER_LIKES__WORKFLOW_USER_LIKES_WID_FKEY = Internal.createForeignKey(WorkflowUserLikes.WORKFLOW_USER_LIKES, DSL.name("workflow_user_likes_wid_fkey"), new TableField[] { WorkflowUserLikes.WORKFLOW_USER_LIKES.WID }, Keys.WORKFLOW_PKEY, new TableField[] { Workflow.WORKFLOW.WID }, true);
    public static final ForeignKey<WorkflowVersionRecord, WorkflowRecord> WORKFLOW_VERSION__WORKFLOW_VERSION_WID_FKEY = Internal.createForeignKey(WorkflowVersion.WORKFLOW_VERSION, DSL.name("workflow_version_wid_fkey"), new TableField[] { WorkflowVersion.WORKFLOW_VERSION.WID }, Keys.WORKFLOW_PKEY, new TableField[] { Workflow.WORKFLOW.WID }, true);
    public static final ForeignKey<WorkflowViewCountRecord, WorkflowRecord> WORKFLOW_VIEW_COUNT__WORKFLOW_VIEW_COUNT_WID_FKEY = Internal.createForeignKey(WorkflowViewCount.WORKFLOW_VIEW_COUNT, DSL.name("workflow_view_count_wid_fkey"), new TableField[] { WorkflowViewCount.WORKFLOW_VIEW_COUNT.WID }, Keys.WORKFLOW_PKEY, new TableField[] { Workflow.WORKFLOW.WID }, true);
}
