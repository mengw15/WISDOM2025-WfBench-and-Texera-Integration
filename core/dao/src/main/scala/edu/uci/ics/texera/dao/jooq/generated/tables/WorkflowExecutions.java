/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 * This file is generated by jOOQ.
 */
package edu.uci.ics.texera.dao.jooq.generated.tables;


import edu.uci.ics.texera.dao.jooq.generated.Keys;
import edu.uci.ics.texera.dao.jooq.generated.TexeraDb;
import edu.uci.ics.texera.dao.jooq.generated.tables.records.WorkflowExecutionsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WorkflowExecutions extends TableImpl<WorkflowExecutionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>texera_db.workflow_executions</code>
     */
    public static final WorkflowExecutions WORKFLOW_EXECUTIONS = new WorkflowExecutions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WorkflowExecutionsRecord> getRecordType() {
        return WorkflowExecutionsRecord.class;
    }

    /**
     * The column <code>texera_db.workflow_executions.eid</code>.
     */
    public final TableField<WorkflowExecutionsRecord, Integer> EID = createField(DSL.name("eid"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>texera_db.workflow_executions.vid</code>.
     */
    public final TableField<WorkflowExecutionsRecord, Integer> VID = createField(DSL.name("vid"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>texera_db.workflow_executions.uid</code>.
     */
    public final TableField<WorkflowExecutionsRecord, Integer> UID = createField(DSL.name("uid"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>texera_db.workflow_executions.status</code>.
     */
    public final TableField<WorkflowExecutionsRecord, Short> STATUS = createField(DSL.name("status"), SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.field("1", SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>texera_db.workflow_executions.result</code>.
     */
    public final TableField<WorkflowExecutionsRecord, String> RESULT = createField(DSL.name("result"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>texera_db.workflow_executions.starting_time</code>.
     */
    public final TableField<WorkflowExecutionsRecord, Timestamp> STARTING_TIME = createField(DSL.name("starting_time"), SQLDataType.TIMESTAMP(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>texera_db.workflow_executions.last_update_time</code>.
     */
    public final TableField<WorkflowExecutionsRecord, Timestamp> LAST_UPDATE_TIME = createField(DSL.name("last_update_time"), SQLDataType.TIMESTAMP(0), this, "");

    /**
     * The column <code>texera_db.workflow_executions.bookmarked</code>.
     */
    public final TableField<WorkflowExecutionsRecord, Boolean> BOOKMARKED = createField(DSL.name("bookmarked"), SQLDataType.BOOLEAN.defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>texera_db.workflow_executions.name</code>.
     */
    public final TableField<WorkflowExecutionsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(128).nullable(false).defaultValue(DSL.field("'Untitled Execution'::character varying", SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>texera_db.workflow_executions.environment_version</code>.
     */
    public final TableField<WorkflowExecutionsRecord, String> ENVIRONMENT_VERSION = createField(DSL.name("environment_version"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>texera_db.workflow_executions.log_location</code>.
     */
    public final TableField<WorkflowExecutionsRecord, String> LOG_LOCATION = createField(DSL.name("log_location"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>texera_db.workflow_executions.runtime_stats_uri</code>.
     */
    public final TableField<WorkflowExecutionsRecord, String> RUNTIME_STATS_URI = createField(DSL.name("runtime_stats_uri"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>texera_db.workflow_executions.cuid</code>.
     */
    public final TableField<WorkflowExecutionsRecord, Integer> CUID = createField(DSL.name("cuid"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>texera_db.workflow_executions.runtime_stats_size</code>.
     */
    public final TableField<WorkflowExecutionsRecord, Integer> RUNTIME_STATS_SIZE = createField(DSL.name("runtime_stats_size"), SQLDataType.INTEGER.defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    private WorkflowExecutions(Name alias, Table<WorkflowExecutionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private WorkflowExecutions(Name alias, Table<WorkflowExecutionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>texera_db.workflow_executions</code> table
     * reference
     */
    public WorkflowExecutions(String alias) {
        this(DSL.name(alias), WORKFLOW_EXECUTIONS);
    }

    /**
     * Create an aliased <code>texera_db.workflow_executions</code> table
     * reference
     */
    public WorkflowExecutions(Name alias) {
        this(alias, WORKFLOW_EXECUTIONS);
    }

    /**
     * Create a <code>texera_db.workflow_executions</code> table reference
     */
    public WorkflowExecutions() {
        this(DSL.name("workflow_executions"), null);
    }

    public <O extends Record> WorkflowExecutions(Table<O> child, ForeignKey<O, WorkflowExecutionsRecord> key) {
        super(child, key, WORKFLOW_EXECUTIONS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : TexeraDb.TEXERA_DB;
    }

    @Override
    public Identity<WorkflowExecutionsRecord, Integer> getIdentity() {
        return (Identity<WorkflowExecutionsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<WorkflowExecutionsRecord> getPrimaryKey() {
        return Keys.WORKFLOW_EXECUTIONS_PKEY;
    }

    @Override
    public List<ForeignKey<WorkflowExecutionsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.WORKFLOW_EXECUTIONS__WORKFLOW_EXECUTIONS_VID_FKEY, Keys.WORKFLOW_EXECUTIONS__WORKFLOW_EXECUTIONS_UID_FKEY, Keys.WORKFLOW_EXECUTIONS__WORKFLOW_EXECUTIONS_CUID_FKEY);
    }

    private transient WorkflowVersion _workflowVersion;
    private transient User _user;
    private transient WorkflowComputingUnit _workflowComputingUnit;

    /**
     * Get the implicit join path to the <code>texera_db.workflow_version</code>
     * table.
     */
    public WorkflowVersion workflowVersion() {
        if (_workflowVersion == null)
            _workflowVersion = new WorkflowVersion(this, Keys.WORKFLOW_EXECUTIONS__WORKFLOW_EXECUTIONS_VID_FKEY);

        return _workflowVersion;
    }

    /**
     * Get the implicit join path to the <code>texera_db.user</code> table.
     */
    public User user() {
        if (_user == null)
            _user = new User(this, Keys.WORKFLOW_EXECUTIONS__WORKFLOW_EXECUTIONS_UID_FKEY);

        return _user;
    }

    /**
     * Get the implicit join path to the
     * <code>texera_db.workflow_computing_unit</code> table.
     */
    public WorkflowComputingUnit workflowComputingUnit() {
        if (_workflowComputingUnit == null)
            _workflowComputingUnit = new WorkflowComputingUnit(this, Keys.WORKFLOW_EXECUTIONS__WORKFLOW_EXECUTIONS_CUID_FKEY);

        return _workflowComputingUnit;
    }

    @Override
    public WorkflowExecutions as(String alias) {
        return new WorkflowExecutions(DSL.name(alias), this);
    }

    @Override
    public WorkflowExecutions as(Name alias) {
        return new WorkflowExecutions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkflowExecutions rename(String name) {
        return new WorkflowExecutions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkflowExecutions rename(Name name) {
        return new WorkflowExecutions(name, null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<Integer, Integer, Integer, Short, String, Timestamp, Timestamp, Boolean, String, String, String, String, Integer, Integer> fieldsRow() {
        return (Row14) super.fieldsRow();
    }
}
